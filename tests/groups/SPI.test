/**
 * Unit Tests for SPI Drivers
 *
 * Author: Michael Rouse
 */
#ifdef GROUP
#undef GROUP
#endif

#define GROUP SPI

#define MOSI  P1_0
#define MISO  P1_1
#define SCK   P1_2

#define MOSI2 P1_3
#define MISO2 P1_4
#define SCK2  P1_5

/**
 * Test the functionality of SPI setup
 */
TEST(setup)
{
#ifndef MC_NO_SPI
  spi_setup(SPI_BUS_1, MOSI, MISO, SCK);
  TEST_ASSERT_BITS_HIGH_MESSAGE(BIT0 + BIT1 + BIT2, *p1_sel, "Register contained low bits after SPI Setup");
#else
  TEST_IGNORE_MESSAGE("Target has no SPI");
#endif
}

/**
 * Setup with multiple buses
 */
TEST(setupMultipleBuses)
{
#ifndef MC_NO_SPI
  #if MC_NUM_SPI_BUSES > 1
    // Setup first SPI bus
    spi_setup(SPI_BUS_1, MOSI, MISO, SCK);
    TEST_ASSERT_BITS_HIGH_MESSAGE(BIT0 + BIT1 + BIT2, *p1_sel, "Register p1_sel contained low bits after SPI Setup");

    // Setup Second SPI BUS
    spi_setup(SPI_BUS_2, MOSI2, MISO2, SCK2);
    TEST_ASSERT_BITS_HIGH_MESSAGE(BIT3 + BIT4 + BIT5, *p1_sel, "Register p1_sel contained low bits after second SPI Setup");
  #else
    TEST_IGNORE_MESSAGE("Target has only one SPI Bus");
  #endif
#else
  TEST_IGNORE_MESSAGE("Target has no SPI");
#endif
}

/**
 * Test the functionality of SPI transmit
 */
TEST(transmit)
{
#ifndef MC_NO_SPI
  spi_transmit(SPI_BUS_1, 99); // Send dummy data
  TEST_ASSERT_EQUAL_MESSAGE(99, *spi1_tx_buf, "sp1_tx_buf did not contain correct data after attempted transmission");
#else
  TEST_IGNORE_MESSAGE("Target has no SPI");
#endif
}

/**
 * Transmit with multiple buses
 */
TEST(transmitMultipleBuses)
{
#ifndef MC_NO_SPI
  #if MC_NUM_SPI_BUSES > 1
    uint8_t result = spi_transmit(SPI_BUS_1, 55);
    TEST_ASSERT_EQUAL_MESSAGE(55, *spi1_tx_buf, "spi1_tx_buf did not contain valid data after attempting to send first time");
    TEST_ASSERT_EQUAL_MESSAGE(0x00, result, "spi_transmit did not return nothing on first transmission");

    result = spi_transmit(SPI_BUS_2, 44);
    TEST_ASSERT_EQUAL_MESSAGE(44, *spi2_tx_buf, "spi2_tx_buf did not contain valid data after attempting to send");
    TEST_ASSERT_EQUAL_MESSAGE(55, result, "Fake spi buffer receive results was not the correct data");

    result = spi_transmit(SPI_BUS_1, 66);
    TEST_ASSERT_EQUAL_MESSAGE(44, result, "Transmitting on SPI_BUS_1 did not return results by SPI_BUS_2");
  #else
    TEST_IGNORE_MESSAGE("Target has no SPI");
  #endif
#else
  TEST_IGNORE_MESSAGE("Target has no SPI");
#endif
}


// Setup function for each test
GROUP_SETUP()
{
  *p1_sel = 0x00;
}


// Run all the tests in this group
GROUP_RUNNER()
{
  RUN(setup);
  RUN(setupMultipleBuses);
  RUN(transmit);
  RUN(transmitMultipleBuses);
}
