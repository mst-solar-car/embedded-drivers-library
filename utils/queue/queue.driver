/**
 * This implements a queue
 *
 * Authors: Michael Rouse
 */
#include <stdlib.h>
#include "../memory/interface.h"
#include "interface.h"
#include "../../datatypes.h"

/* This struct will hold data for each item--most important thing is the read flag */
typedef struct data_wrapper_t {
  bool read;
  void* data;
} data_wrapper;


/* Complete the struct so the internals are hidden from the user */
struct Queue {
  data_wrapper buffer[QUEUE_SIZE];
  uint8_t head;
  uint8_t tail;
};


#define getHead(q) q->buffer[q->head]
#define getTail(q) q->buffer[q->tail]


/* Creates a new instance of a Queue */
Queue* __Queue_New(uint16_t datatype_size)
{
  /* Create the Queue struct */
  Queue* queue = (Queue*)malloc(sizeof(Queue));
  if (queue == (void*)NULL)
    return (Queue*)NULL;

  /* Setup list of data wrappers */
  uint16_t i;
  for (i = 0; i < QUEUE_SIZE; i++)
  {
    /* Allocate appropriate amount for the specified type */
    queue->buffer[i].data = (void*) malloc(datatype_size);
    if (queue->buffer[i].data == (void*)NULL)
    {
      free(queue);
      return (Queue*)NULL;
    }
    queue->buffer[i].read = true;
  }

  /* Setup rest of struct */
  queue->head = 0;
  queue->tail = 0;

  return queue;
}


/* Pops a value from the queue */
void* __Queue_Pop(Queue* queue)
{
  /* Don't do anything if the queue is empty */
  if (getTail(queue).read == true)
    return (void*)NOTHING;

  void* popped = getTail(queue).data;
  getTail(queue).read = true;

  /* Advance tail of the queue*/
  queue->tail++;
  if (queue->tail >= QUEUE_SIZE)
    queue->tail = 0;

  return popped;
}


/* Pushes a value onto the queue */
void __Queue_Push(Queue* queue, void* data, uint16_t size)
{
  /* Copy into the queue */
  utils_memcpy(getHead(queue).data, data, size);
  getHead(queue).read = false;

  /* Advance the head of the queue */
  queue->head++;
  if (queue->head >= QUEUE_SIZE)
    queue->head = 0;
}


/* Deletes a queue */
void __Queue_Delete(Queue** queue)
{
  uint8_t i;
  for (i = 0; i < QUEUE_SIZE; i++)
    free((*queue)->buffer[i].data);

  free(*queue);

  *queue = NULL;
}