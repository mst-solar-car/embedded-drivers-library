/**
 * Interrupt Driver Implementation
 *
 * Authors: Michael Rouse
 */
#include "../datatypes.h"
#include "interface.h"

/* Array to hold all registered interrupts */
static voidFuncPtr _pinInterrupts[MC_NUMBER_OF_PORTS+1][17];





/* Registers an event with on a pin */
void interrupt_attach(io_pin pin, void(*func)(void))
{
  if (func == NULL)
    return;

  pin_info_t _pin = GetPinInfo(pin);
  if (!IsValidPinInfo(_pin) || _pin.ifg_reg == NO_REGISTER || _pin.ie_reg == NO_REGISTER)
    return;
  uint8_t bit = GetBitIndex(_pin.bit);
  if (bit == NO_BIT)
    return;

  _pinInterrupts[_pin.port][bit] = func;
}



/* Dispatches an interrupt to the appropriate function if it exists */
void __interrupt_dispatch(uint8_t port)
{
  if (port == NO_PORT)
    return;

  port_info_t _port = GetPortInfo(port);
  if (!IsValidPortInfo(_port) || _port.ifg_reg == NO_REGISTER)
    return;

  /* Determine what bit the interrupt occured on */
  uint8_t bit = NO_BIT;
  if (*_port.ifg_reg & BIT6)
    bit = GetBitIndex(BIT6);
  else if (*_port.ifg_reg & BIT5)
    bit = GetBitIndex(BIT5);
  else if (*_port.ifg_reg & BIT4)
    bit = GetBitIndex(BIT4);
  else if (*_port.ifg_reg & BIT3)
    bit = GetBitIndex(BIT3);
  else if (*_port.ifg_reg & BIT2)
    bit = GetBitIndex(BIT2);
  else if (*_port.ifg_reg & BIT1)
    bit = GetBitIndex(BIT1);
  else if (*_port.ifg_reg & BIT0)
    bit = GetBitIndex(BIT0);

  if (bit == NO_BIT)
    return;

  if (_pinInterrupts[port][bit] != NULL)
    _pinInterrupts[port][bit]();

  /* Clear the interrupt flags */
  *_port.ifg_reg &= ~(GetBitFromIndex(bit));
}


