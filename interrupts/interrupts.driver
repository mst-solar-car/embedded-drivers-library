/**
 * Interrupt Driver Implementation
 *
 * Authors: Michael Rouse
 */
#include "../datatypes.h"
#include "interface.h"

/* Array to hold all registered interrupts */
static voidFuncPtr _pinInterrupts[MC_NUMBER_OF_PORTS+1][17];

/* Function Pointers */
static void(*_mc_interrupt_configure)(bool);
static void(*_pin_set_mode)(io_pin, pin_mode);


/* Set the state of interrupts */
void interrupts_set_state(bool enable)
{
  _mc_interrupt_configure(enable);
}


/* Registers an event with on a pin */
void interrupt_attach(io_pin pin, void(*func)(void))
{
  if (func == NULL)
    return;

  _pin_set_mode(pin, Input);

  pin_info_t _pin = GetPinInfo(pin);
  if (!IsValidPinInfo(_pin) || _pin.port->ifg_reg == NO_REGISTER || _pin.port->ie_reg == NO_REGISTER)
    return;

  uint8_t bit = GetBitIndex(_pin.bit);
  if (bit == NO_BIT)
    return;

  *(_pin.port->ies_reg) |= _pin.bit;
  *(_pin.port->ifg_reg) &= ~(_pin.bit);
  *(_pin.port->ie_reg) |= _pin.bit;

  _pinInterrupts[(_pin.port)->number][bit] = func;
}



/* Dispatches an interrupt to the appropriate function if it exists */
void __interrupt_dispatch(uint8_t port)
{
  if (port == NO_PORT)
    return;

  port_info_t _port = GetPortInfo(port);
  if (!IsValidPortInfo(_port) || _port.ifg_reg == NO_REGISTER || _poer.ie_reg == NO_REGISTER)
    return;

  /* Determine what bit the interrupt occured on */
  int8_t bit;
  uint16_t _bit = NO_BIT;
  for (bit = 8; bit > NO_BIT; bit--)
  {
    _bit = GetBitFromIndex(bit);
    if (*(_port.ie_reg) & _bit)
    {
      if (*(_port.ifg_reg) & _bit)
      {
        break;
      }
    }
  }

  if (bit == NO_BIT)
    return;

  if (_pinInterrupts[port][bit] != NULL)
    _pinInterrupts[port][bit]();

  /* Clear the interrupt flags */
  *_port.ifg_reg &= ~(GetBitFromIndex(bit));
}



/* Initialization, not ran by the user */
void __interrupt_initialization(void(*mc_interrupt_configure)(bool), void(*pin_set_mode)(io_pin, pin_mode))
{
  _mc_interrupt_configure = mc_interrupt_configure;
  _pin_set_mode = pin_set_mode;
}
